/*
 * Agreement with Roles View and Functions
 *
 * This schema creates a view that joins agreements with their associated roles,
 * and provides several functions to query this view efficiently.
 *
 * The view:
 * - agreement_with_roles: Joins agreements with their roles as a JSONB array
 *
 * Functions:
 * - get_agreements_with_roles(): Returns all agreements with their roles
 * - get_agreements_by_role(role_name TEXT): Returns agreements filtered by role name
 * - get_agreements_by_role_id(role_id UUID): Returns agreements filtered by role ID
 * - get_agreements_by_role_string(role_string TEXT): Returns agreements filtered by a string that matches role name or code
 * - get_agreements_with_roles_paginated(...): Returns paginated and filtered agreements with pagination metadata
 * - get_agreement_with_roles_by_id(p_agreement_id UUID): Returns a single agreement by ID
 *
 * Usage examples:
 * - SELECT * FROM get_agreements_with_roles();
 * - SELECT * FROM get_agreements_by_role('Student');
 * - SELECT * FROM get_agreements_by_role_id('123e4567-e89b-12d3-a456-426614174000');
 * - SELECT * FROM get_agreements_by_role_string('admin');
 * - SELECT get_agreements_with_roles_paginated(10, 0, 'active', NULL, NULL, 'john', NULL);
 * - SELECT get_agreement_with_roles_by_id('123e4567-e89b-12d3-a456-426614174000');
 */

-- Create view that joins agreements with their roles
CREATE OR REPLACE VIEW agreement_with_roles AS
WITH roles_array AS (
    SELECT
        ar.agreement_id,
        jsonb_agg(
            jsonb_build_object(
                'role_id', r.id,
                'role_name', r.name,
                'role_description', r.description
            )
        ) as roles
    FROM
        agreement_roles ar
    JOIN
        roles r ON ar.role_id = r.id
    GROUP BY
        ar.agreement_id
)
SELECT
    a.id,
    a.user_id,
    a.headquarter_id,
    a.season_id,
    a.status,
    a.email,
    a.document_number,
    a.phone,
    a.name,
    a.last_name,
    a.address,
    a.signature_data,
    a.volunteering_agreement,
    a.ethical_document_agreement,
    a.mailing_agreement,
    a.age_verification,
    a.created_at,
    a.updated_at,
    COALESCE(ra.roles, '[]'::jsonb) as roles
FROM
    agreements a
LEFT JOIN
    roles_array ra ON a.id = ra.agreement_id;

-- Set security for the view to be the same as the invoker
-- This ensures the view respects the RLS policies of the underlying tables
ALTER VIEW agreement_with_roles SET (security_invoker = true);

CREATE OR REPLACE FUNCTION get_agreements_with_roles()
RETURNS SETOF agreement_with_roles
LANGUAGE sql
SECURITY INVOKER
SET search_path = ''
AS $$
  SELECT * FROM public.agreement_with_roles;
$$;

CREATE OR REPLACE FUNCTION get_agreements_by_role(role_name TEXT)
RETURNS SETOF agreement_with_roles
LANGUAGE sql
SECURITY INVOKER
SET search_path = ''
AS $$
  SELECT awr.*
  FROM public.agreement_with_roles awr
  WHERE EXISTS (
    SELECT 1
    FROM jsonb_array_elements(awr.roles) as role_obj
    WHERE role_obj->>'role_name' = role_name
  );
$$;

CREATE OR REPLACE FUNCTION get_agreements_by_role_id(role_id UUID)
RETURNS SETOF agreement_with_roles
LANGUAGE sql
SECURITY INVOKER
SET search_path = ''
AS $$
  SELECT awr.*
  FROM public.agreement_with_roles awr
  WHERE EXISTS (
    SELECT 1
    FROM jsonb_array_elements(awr.roles) as role_obj
    WHERE role_obj->>'role_id' = role_id::text
  );
$$;

CREATE OR REPLACE FUNCTION get_agreements_by_role_string(role_string TEXT)
RETURNS SETOF agreement_with_roles
LANGUAGE sql
SECURITY INVOKER
SET search_path = ''
AS $$
  SELECT awr.*
  FROM public.agreement_with_roles awr
  WHERE EXISTS (
    SELECT 1
    FROM jsonb_array_elements(awr.roles) as role_obj
    WHERE role_obj->>'role_name' ILIKE '%' || role_string || '%'
  )
  OR EXISTS (
    SELECT 1
    FROM jsonb_array_elements(awr.roles) as role_obj, public.roles r
    WHERE role_obj->>'role_id' = r.id::text
    AND r.code ILIKE '%' || role_string || '%'
  );
$$;

CREATE OR REPLACE FUNCTION get_agreements_with_roles_paginated(
  p_limit INTEGER DEFAULT 10,
  p_offset INTEGER DEFAULT 0,
  p_status TEXT DEFAULT NULL,
  p_headquarter_id UUID DEFAULT NULL,
  p_season_id UUID DEFAULT NULL,
  p_search TEXT DEFAULT NULL,
  p_role_id UUID DEFAULT NULL
)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY INVOKER
SET search_path = ''
AS $$
DECLARE
  v_total BIGINT;
  v_results JSONB;
  v_data JSONB;
BEGIN
  SELECT COUNT(*) INTO v_total
  FROM public.agreement_with_roles awr
  WHERE
    (p_status IS NULL OR awr.status = p_status)
    AND (p_headquarter_id IS NULL OR awr.headquarter_id = p_headquarter_id)
    AND (p_season_id IS NULL OR awr.season_id = p_season_id)
    AND (p_search IS NULL OR
         awr.name ILIKE '%' || p_search || '%' OR
         awr.last_name ILIKE '%' || p_search || '%' OR
         awr.email ILIKE '%' || p_search || '%' OR
         awr.document_number ILIKE '%' || p_search || '%')
    AND (p_role_id IS NULL OR EXISTS (
      SELECT 1
      FROM jsonb_array_elements(awr.roles) as role_obj
      WHERE role_obj->>'role_id' = p_role_id::text
    ));

  SELECT jsonb_agg(to_jsonb(awr)) INTO v_data
  FROM (
    SELECT *
    FROM public.agreement_with_roles awr
    WHERE
      (p_status IS NULL OR awr.status = p_status)
      AND (p_headquarter_id IS NULL OR awr.headquarter_id = p_headquarter_id)
      AND (p_season_id IS NULL OR awr.season_id = p_season_id)
      AND (p_search IS NULL OR
           awr.name ILIKE '%' || p_search || '%' OR
           awr.last_name ILIKE '%' || p_search || '%' OR
           awr.email ILIKE '%' || p_search || '%' OR
           awr.document_number ILIKE '%' || p_search || '%')
      AND (p_role_id IS NULL OR EXISTS (
        SELECT 1
        FROM jsonb_array_elements(awr.roles) as role_obj
        WHERE role_obj->>'role_id' = p_role_id::text
      ))
    ORDER BY awr.created_at DESC
    LIMIT p_limit
    OFFSET p_offset
  ) awr;

  -- Handle case when no results are found
  IF v_data IS NULL THEN
    v_data := '[]'::jsonb;
  END IF;

  -- Construct the final result object
  v_results := jsonb_build_object(
    'data', v_data,
    'pagination', jsonb_build_object(
      'total', v_total,
      'limit', p_limit,
      'offset', p_offset,
      'page', CASE WHEN p_limit > 0 THEN (p_offset / p_limit) + 1 ELSE 1 END,
      'pages', CASE WHEN p_limit > 0 THEN CEIL(v_total::numeric / p_limit::numeric) ELSE 1 END
    )
  );

  RETURN v_results;
END;
$$;

CREATE OR REPLACE FUNCTION get_agreement_with_roles_by_id(p_agreement_id UUID)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY INVOKER
SET search_path = ''
AS $$
DECLARE
  v_result JSONB;
BEGIN
  SELECT to_jsonb(awr) INTO v_result
  FROM public.agreement_with_roles awr
  WHERE awr.id = p_agreement_id;

  IF v_result IS NULL THEN
    RETURN jsonb_build_object('error', 'Agreement not found');
  END IF;

  RETURN v_result;
END;
$$;


-- This file contains seed data for the Akademia database
-- It depends on the schema being already created
-- Execute schema.sql before running this file

BEGIN;

-- ==========================================
-- 1. Location Entities - Seed Data
-- ==========================================

-- Seed Countries
INSERT INTO countries (id, name, code)
VALUES (uuid_generate_v4(), 'Argentina', 'AR'),
       (uuid_generate_v4(), 'Bolivia', 'BO'),
       (uuid_generate_v4(), 'Brasil', 'BR'),
       (uuid_generate_v4(), 'Colombia', 'CO'),
       (uuid_generate_v4(), 'Chile', 'CL'),
       (uuid_generate_v4(), 'Costa Rica', 'CR'),
       (uuid_generate_v4(), 'Ecuador', 'EC'),
       (uuid_generate_v4(), 'España', 'ES'),
       (uuid_generate_v4(), 'México', 'MX'),
       (uuid_generate_v4(), 'Perú', 'PE'),
       (uuid_generate_v4(), 'Internacional-Webinar', 'I_WB'),
       (uuid_generate_v4(), 'Uruguay', 'UY');

-- Seed Headquarters
-- Argentina (AR)
INSERT INTO headquarters (name, country_id)
VALUES ('Mendoza', (SELECT id FROM countries WHERE code = 'AR')),
       ('San Rafael', (SELECT id FROM countries WHERE code = 'AR')),
       ('Buenos Aires', (SELECT id FROM countries WHERE code = 'AR')),
       ('Santa Fe', (SELECT id FROM countries WHERE code = 'AR')),
       ('Santiago del Estero', (SELECT id FROM countries WHERE code = 'AR')),
       ('Río Cuarto', (SELECT id FROM countries WHERE code = 'AR')),
       ('Catamarca', (SELECT id FROM countries WHERE code = 'AR')),
       ('Mar de Plata', (SELECT id FROM countries WHERE code = 'AR')),
       ('Córdoba', (SELECT id FROM countries WHERE code = 'AR')),
       ('General Pico, La Pampa', (SELECT id FROM countries WHERE code = 'AR')),
       ('San Fernando, Bs As', (SELECT id FROM countries WHERE code = 'AR')),
       ('La Plata', (SELECT id FROM countries WHERE code = 'AR')),
       ('Villa María', (SELECT id FROM countries WHERE code = 'AR')),
       ('Resistencia', (SELECT id FROM countries WHERE code = 'AR')),
       ('San Juan', (SELECT id FROM countries WHERE code = 'AR')),
       ('Konsejo Akademíko', (SELECT id FROM countries WHERE code = 'AR'));

-- España (ES)
INSERT INTO headquarters (name, country_id)
VALUES ('Barcelona', (SELECT id FROM countries WHERE code = 'ES')),
       ('Cambrils', (SELECT id FROM countries WHERE code = 'ES')),
       ('Girona', (SELECT id FROM countries WHERE code = 'ES')),
       ('Granollers', (SELECT id FROM countries WHERE code = 'ES')),
       ('Mataró', (SELECT id FROM countries WHERE code = 'ES')),
       ('Sabadell', (SELECT id FROM countries WHERE code = 'ES')),
       ('Lleida', (SELECT id FROM countries WHERE code = 'ES')),
       ('Tarragona', (SELECT id FROM countries WHERE code = 'ES')),
       ('Sant Boi de Llobregat', (SELECT id FROM countries WHERE code = 'ES')),
       ('Vic', (SELECT id FROM countries WHERE code = 'ES')),
       ('La Senia', (SELECT id FROM countries WHERE code = 'ES')),
       ('Reus', (SELECT id FROM countries WHERE code = 'ES')),
       ('Elche', (SELECT id FROM countries WHERE code = 'ES')),
       ('Ibiza', (SELECT id FROM countries WHERE code = 'ES')),
       ('Mallorca', (SELECT id FROM countries WHERE code = 'ES')),
       ('Murcia', (SELECT id FROM countries WHERE code = 'ES')),
       ('Valencia Nómada Upv', (SELECT id FROM countries WHERE code = 'ES')),
       ('Valencia Catarroja', (SELECT id FROM countries WHERE code = 'ES')),
       ('Tenerife', (SELECT id FROM countries WHERE code = 'ES')),
       ('Cartagena', (SELECT id FROM countries WHERE code = 'ES')),
       ('Alicante', (SELECT id FROM countries WHERE code = 'ES')),
       ('Cáceres', (SELECT id FROM countries WHERE code = 'ES')),
       ('Bilbao', (SELECT id FROM countries WHERE code = 'ES')),
       ('Burgos', (SELECT id FROM countries WHERE code = 'ES')),
       ('Córdoba', (SELECT id FROM countries WHERE code = 'ES')),
       ('Donostia/San Sebastián', (SELECT id FROM countries WHERE code = 'ES')),
       ('Granada', (SELECT id FROM countries WHERE code = 'ES')),
       ('Jaén', (SELECT id FROM countries WHERE code = 'ES')),
       ('Madrid', (SELECT id FROM countries WHERE code = 'ES')),
       ('Málaga', (SELECT id FROM countries WHERE code = 'ES')),
       ('Valladolid', (SELECT id FROM countries WHERE code = 'ES')),
       ('Zaragoza', (SELECT id FROM countries WHERE code = 'ES')),
       ('Sevilla', (SELECT id FROM countries WHERE code = 'ES')),
       ('Coruña', (SELECT id FROM countries WHERE code = 'ES')),
       ('Almería', (SELECT id FROM countries WHERE code = 'ES')),
       ('Linares', (SELECT id FROM countries WHERE code = 'ES')),
       ('Pisuerga', (SELECT id FROM countries WHERE code = 'ES')),
       ('Logroño', (SELECT id FROM countries WHERE code = 'ES')),
       ('Gijón', (SELECT id FROM countries WHERE code = 'ES')),
       ('Konsejo Akademíko', (SELECT id FROM countries WHERE code = 'ES'));

-- Ecuador (EC)
INSERT INTO headquarters (name, country_id)
VALUES ('Quito', (SELECT id FROM countries WHERE code = 'EC')),
       ('Ambato', (SELECT id FROM countries WHERE code = 'EC')),
       ('Konsejo Akademíko', (SELECT id FROM countries WHERE code = 'EC'));

-- México (MX)
INSERT INTO headquarters (name, country_id)
VALUES ('Ciudad de México', (SELECT id FROM countries WHERE code = 'MX')),
       ('Monterrey', (SELECT id FROM countries WHERE code = 'MX')),
       ('Tepatitlan de Morelos', (SELECT id FROM countries WHERE code = 'MX')),
       ('Konsejo Akademíko', (SELECT id FROM countries WHERE code = 'MX'));

-- Perú (PE)
INSERT INTO headquarters (name, country_id)
VALUES ('Lima', (SELECT id FROM countries WHERE code = 'PE'));

-- Colombia (CO)
INSERT INTO headquarters (name, country_id)
VALUES ('Medellín', (SELECT id FROM countries WHERE code = 'CO')),
       ('Cali', (SELECT id FROM countries WHERE code = 'CO')),
       ('Bogotá', (SELECT id FROM countries WHERE code = 'CO')),
       ('Bucaramanga', (SELECT id FROM countries WHERE code = 'CO')),
       ('Aburra Sur', (SELECT id FROM countries WHERE code = 'CO')),
       ('ISA', (SELECT id FROM countries WHERE code = 'CO')),
       ('Konsejo Akademíko', (SELECT id FROM countries WHERE code = 'CO'));

-- Bolivia (BO)
INSERT INTO headquarters (name, country_id)
VALUES ('Santa Cruz', (SELECT id FROM countries WHERE code = 'BO')),
       ('Konsejo Akademíko', (SELECT id FROM countries WHERE code = 'BO'));

-- Uruguay (UY)
INSERT INTO headquarters (name, country_id)
VALUES ('Montevideo', (SELECT id FROM countries WHERE code = 'UY')),
       ('Konsejo Akademíko', (SELECT id FROM countries WHERE code = 'UY'));

-- Chile (CL)
INSERT INTO headquarters (name, country_id)
VALUES ('Santiago', (SELECT id FROM countries WHERE code = 'CL')),
       ('Konsejo Akademíko', (SELECT id FROM countries WHERE code = 'CL'));

-- Webinar (país Internacional-Webinar, I_WB)
INSERT INTO headquarters (name, country_id)
VALUES ('Webinar Septiembre', (SELECT id FROM countries WHERE code = 'I_WB')),
       ('Webinar Marzo', (SELECT id FROM countries WHERE code = 'I_WB'));


-- ==========================================
-- 2. People and Roles - Seed Data
-- ==========================================

-- Seed Roles
INSERT INTO roles (id, code, name, description, status)
VALUES (uuid_generate_v4(), 'general_director', 'Director General',
        'Coordinador General de la Akademia a nivel internacional, gestiona el Konsejo y se mantiene en contacto con el Fundador',
        'active'),
       (uuid_generate_v4(), 'pedagogical_leader', 'Líder Pedagógico',
        'Lidera el equipo pedagógico, asesora a las Akademias en temas pedagógicos y vela por el cumplimiento del programa',
        'active'),
       (uuid_generate_v4(), 'innovation_leader', 'Líder de Innovación',
        'Lidera el equipo de innovación, impulsa nuevos proyectos y metodologías para mejorar el programa',
        'active'),
       (uuid_generate_v4(), 'communication_leader', 'Líder de Comunicación',
        'Lidera el equipo de comunicación, gestiona la estrategia de comunicación y la imagen corporativa', 'active'),
       (uuid_generate_v4(), 'executive_leader', 'Líder Ejecutivo',
        'Lidera el equipo ejecutivo, analiza necesidades de gestión y optimiza procesos internos', 'active'),
       (uuid_generate_v4(), 'community_leader', 'Líder de Komunidad',
        'Lidera el equipo de Komunidad, genera vínculos entre miembros actuales y antiguos de La Akademia', 'active'),
       (uuid_generate_v4(), 'coordination_leader', 'Líder de Koordinación',
        'Coordinador de todos los Koordinadores y su representante en el Konsejo', 'active'),
       (uuid_generate_v4(), 'coordinator', 'Koordinador',
        'Nexo entre el Konsejo y las Akademias locales asignadas. Apoyo y supervisión de sedes', 'active'),
       (uuid_generate_v4(), 'legal_advisor', 'Asesor Legal',
        'Lidera el Comité ético y asesora al Konsejo en temas legales', 'active'),
       (uuid_generate_v4(), 'konsejo_member', 'Miembro del Konsejo de Dirección',
        'Miembro del consejo de dirección con capacidad de toma de decisiones estratégicas', 'active'),
       (uuid_generate_v4(), 'headquarter_manager', 'Director/a Local',
        'Responsable de la dirección general de una sede',
        'active'),
       (uuid_generate_v4(), 'pedagogical_manager', 'Director/a Pedagógico Local',
        'Responsable del área pedagógica de una sede',
        'active'),
       (uuid_generate_v4(), 'communication_manager', 'Director/a de Comunicación Local',
        'Responsable del área de comunicación de una sede',
        'active'),
       (uuid_generate_v4(), 'companion_director', 'Director/a de Acompañantes Local',
        'Responsable del área de acompañamiento de una sede',
        'active'),
       (uuid_generate_v4(), 'manager_assistant', 'Asistente a la dirección',
        'Colaborador Asistente en la dirección de una sede', 'active'),
       (uuid_generate_v4(), 'superadmin', 'Super administrador', 'Administrador super usuario', 'active'),
       (uuid_generate_v4(), 'companion', 'Acompañante',
        'Persona que acompaña a los alumnos en su proceso de aprendizaje', 'active'),
       (uuid_generate_v4(), 'facilitator', 'Facilitador', 'Facilitador de actividades y talleres', 'active'),
       (uuid_generate_v4(), 'student', 'Alumno', 'Estudiante registrado en el programa', 'active');


-- ==========================================
-- 3. Seasons - Seed Data
-- ==========================================

-- Add one season for each headquarter
INSERT INTO seasons (id, name, headquarter_id, start_date, end_date, status)
SELECT
    uuid_generate_v4(),
    headquarters.name || ' - Edición 2024-2025',
    headquarters.id,
    '2024-09-10',
    '2025-05-15',
    'active'
FROM headquarters;




-- Test Users: Only for development
-- Uncomment this section for local development if needed
/*
-- Create test users in auth schema if in development mode
DO $$
BEGIN
  IF current_setting('app.environment', TRUE)::text = 'development' THEN
    -- This function only works in local development with Supabase
    PERFORM supabase_auth.create_user(
      email := 'admin@example.com',
      password := 'password123',
      email_confirmed := true,
      data := '{"name": "Admin User", "role": "admin"}'::jsonb
    );

    -- Insert agreements with test user
    INSERT INTO agreements (role_id, user_id, headquarter_id, status, email, name, last_name)
    SELECT
      (SELECT id FROM roles WHERE code = 'superadmin'),
      (SELECT id FROM auth.users WHERE email = 'admin@example.com'),
      (SELECT id FROM headquarters LIMIT 1),
      'active',
      'admin@example.com',
      'Admin',
      'User';
  END IF;
END
$$;
*/

COMMIT;


